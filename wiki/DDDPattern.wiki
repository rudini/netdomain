#summary Describes how to apply DDD Patterns.

= DDD Patterns =

This page does not provide the theory behind DDD patterns but rather how to implement such patterns using the netdomain framework.

= Repository pattern =

The concept is to let your Repositories only talk to the Workspace abstraction. For common repository functions, a base class is implemented.

The following sample shows, how to create a Repository class in your code.
Your class must only derive from the Repository base class of a specific type (the aggregate root type).
The Repository gets the IWorkspace by its constructor.

{{{
public class PersonRepository : Repository<Person>
{
    public PersonRepository(IWorkspace context)
        : base(context)
    { }
}
}}}

= Specifications =

  * Encapsulates the criteria in a Specification instance used as a variant of the query object pattern or for business rules implementation
  * The criterion could use another query (AND, OR) or can be negated (NOT)
  * Used by the Repository to query for objects.

{{{
var personWithNameEqualsJohn = new Specification<Person>(p => p.Name == "John");
var personWithNameEqualsJohnAndProfessionEqualsEngineer = new Specification<Person>(p => p.Profession == "Engineer");
var spec = specification.And(personWithNameEqualsJohnAndProfessionEqualsEngineer);
IEnumerable<Person> person = repository.FindBySpecification(spec);
}}}
