= Enable and simplifies TDD  =

== Using the InMemoryQueryableContext ==

For unit testing purposes, itâ€™s not necessary to test the underlying persistence framework. We just want to test the repository. So you just have to mock the IWorkspace.
To simulate persistent data, you can add Entities to an InMemoryQueryableContext as you can see in the following code snippet (NMock2).

{{{
[TestMethod]
public void GetBySpecification()
{
    var workspace = Mockery.NewMock<IWorkspace>();
    var testee = new MediumRepository(workspace);
    
    var title = "Testtitle";
    var spec = new Specification<Medium>(m => m.Title == title);

    var medium = new Medium { Title = title };

    InMemoryQueryableContext<Medium> queryableType = new InMemoryQueryableContext<Medium>();
    queryableType.Insert(medium);

    Expect.Once.On(workspace).Method("CreateQuery", typeof(Medium)).Will(Return.Value(queryableType));
            
    var fetchedMedium = testee.FindBySpecification(spec).First();

    Assert.AreEqual(medium, fetchedMedium);

    this.mockery.VerifyAllExpectationsHaveBeenMet();
}
}}}

== Using the InMemoryWorkspace ==

{{{
[TestMethod]
public void GetBySpecification()
{
    var workspace = new InMemoryWorkspace>();
    var testee = new MediumRepository(workspace);
    
    var title = "Testtitle";
    var spec = new Specification<Medium>(m => m.Title == title);

    var medium = new Medium { Title = title };
    workspace.Add(medium);
         
    var fetchedMedium = testee.FindBySpecification(spec).First();

    Assert.AreEqual(medium, fetchedMedium);
}
}}}

|| Remark: Not all LINQ Queries are supported by all persistence Frameworks. ||